import flaggedList from '../util/canbevegan.json';

/**
 * This functions takes the given ingredient
 * and checks it against the can-be-vegan list of ingredients
 * @param {string} ingredientToCheck - the ingredient to check
 * @return <code>true</code> if ingredient is on can-be-vegan list
 */
export function isFlaggedIngredient (ingredientToCheck) {
  // true if empty
  if (ingredientToCheck.length === 0) return true;

  const formattedIngredientToCheck = ingredientToCheck.trim().toLowerCase();

  return flaggedList.includes(formattedIngredientToCheck);
}

/**
 * This functions takes a given list of ingredients
 * and checks them against the can-be-veagn list of ingredients
 * @param {[string]} ingredientsToCheck - the list of ingredients to check
 * @return Array of ingredients that are considered as flagged / can-be-vegan
 */
export function containsFlaggedIngredients (ingredientsToCheck) {
  return ingredientsToCheck.filter(ingredient =>
    isFlaggedIngredient(ingredient)
  );
}

import { containsNonVeganIngredients } from './IsVegan';
import { containsFlaggedIngredients } from './CanBeVegan';

/**
 * This functions takes a given list of ingredients
 * and checks them against the non-vegan and the can-be-vegan list of ingredients
 * @param {[string]} ingredientsToCheck - the list of ingredients to check
 * @return {nonvegan: [], flagged:[]} with nonvegan and flagged ingredients
 */
export function checkIngredients (ingredientsToCheck) {
  const filteredElements = {
    // check non vegan ingredient
    nonvegan: containsNonVeganIngredients(ingredientsToCheck),
    // check flagged ingredient
    flagged: containsFlaggedIngredients(ingredientsToCheck)
  };
  return filteredElements;
}
import nonVeganList from '../util/nonvegan.json';

/**
 * This functions takes the given ingredient
 * and checks it against the non-vegan list of ingredients
 * @param {string} ingredientToCheck - the ingredient to check
 * @return <code>true</code> if ingredient is not in nonVeganList
 */
export function isVeganIngredient (ingredientToCheck) {
  // true if empty
  if (ingredientToCheck.length === 0) return true;

  const formattedIngredientToCheck = ingredientToCheck.trim().toLowerCase();

  return !nonVeganList.includes(formattedIngredientToCheck);
}

/**
 * This functions takes a given list of ingredients
 * and checks them against the non-vegan list of ingredients
 * @param {[string]} ingredientsToCheck - the lit of ingredients to check
 * @return <code>true</code> if ingredients are not in nonVeganList
 */
export function isVeganIngredientList (ingredientsToCheck) {
  return !ingredientsToCheck.some(ingredient => !isVeganIngredient(ingredient));
}

/**
 * This functions takes a given list of ingredients
 * and checks them against the non-vegan list of ingredients
 * @param {[string]} ingredientsToCheck - the lit of ingredients to check
 * @return Array of ingredients that are non-vegan
 */
export function containsNonVeganIngredients (ingredientsToCheck) {
  return ingredientsToCheck.filter(
    ingredient => !isVeganIngredient(ingredient)
  );
}

